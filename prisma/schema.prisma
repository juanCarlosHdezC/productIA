// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  plan          String?   @default("Gratis")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  products      Product[]
  descriptions  Description[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  category    String
  keywords    Json     // Almacenado como array JSON
  tone        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  descriptions Description[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Description {
  id          String   @id @default(cuid())
  content     String   @db.Text
  productId   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  seoAnalysis SeoAnalysis?
}

model SeoAnalysis {
  id                String      @id @default(cuid())
  score             Int         // Puntuación global de 0 a 100
  keywordDensity    Float       // Densidad de palabras clave (%)
  readabilityScore  Int         // Puntuación de legibilidad de 0 a 100
  suggestions       Json        // Sugerencias de mejora como array JSON
  metaTitle         String?     // Sugerencia de meta título
  metaDescription   String?     // Sugerencia de meta descripción
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relación con Description
  descriptionId     String      @unique
  description       Description @relation(fields: [descriptionId], references: [id], onDelete: Cascade)
}

